// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UI.Examica.Model.Persistence;

namespace UI.Examica.API.Migrations
{
    [DbContext(typeof(ExamicaDbContext))]
    partial class ExamicaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("UI.Examica.Model.Core.Domains.Answer", b =>
                {
                    b.Property<int>("ExamId");

                    b.Property<int>("QuestionId");

                    b.Property<string>("AppUserId");

                    b.Property<bool>("IsCorrect")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("UserAnswer");

                    b.HasKey("ExamId", "QuestionId", "AppUserId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("UI.Examica.Model.Core.Domains.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("UI.Examica.Model.Core.Domains.ComplexQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("ComplexQuestions");
                });

            modelBuilder.Entity("UI.Examica.Model.Core.Domains.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndDateTime");

                    b.Property<bool>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("Mark");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<DateTime>("StartDateTime");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("UI.Examica.Model.Core.Domains.ExamAppUser", b =>
                {
                    b.Property<int>("ExamId");

                    b.Property<string>("AppUserId");

                    b.HasKey("ExamId", "AppUserId");

                    b.HasIndex("AppUserId");

                    b.ToTable("ExamAppUsers");
                });

            modelBuilder.Entity("UI.Examica.Model.Core.Domains.ExamComplexQuestion", b =>
                {
                    b.Property<int>("ComplexQuestionId");

                    b.Property<int>("ExamId");

                    b.HasKey("ComplexQuestionId", "ExamId");

                    b.HasIndex("ExamId");

                    b.ToTable("ExamComplexQuestions");
                });

            modelBuilder.Entity("UI.Examica.Model.Core.Domains.ExamQuestion", b =>
                {
                    b.Property<int>("QuestionId");

                    b.Property<int>("ExamId");

                    b.HasKey("QuestionId", "ExamId");

                    b.HasIndex("ExamId");

                    b.ToTable("ExamQuestions");
                });

            modelBuilder.Entity("UI.Examica.Model.Core.Domains.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("UI.Examica.Model.Core.Domains.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Image");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("OwnerId");

                    b.Property<int>("PricingPlanId");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PricingPlanId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("UI.Examica.Model.Core.Domains.OrganizationAdmin", b =>
                {
                    b.Property<string>("AppUserId");

                    b.Property<int>("OrgnaizationId");

                    b.HasKey("AppUserId", "OrgnaizationId");

                    b.HasIndex("OrgnaizationId");

                    b.ToTable("OrganizationAdmins");
                });

            modelBuilder.Entity("UI.Examica.Model.Core.Domains.OrganizationExaminee", b =>
                {
                    b.Property<string>("AppUserId");

                    b.Property<int>("OrgnaizationId");

                    b.HasKey("AppUserId", "OrgnaizationId");

                    b.HasIndex("OrgnaizationId");

                    b.ToTable("OrganizationExaminees");
                });

            modelBuilder.Entity("UI.Examica.Model.Core.Domains.OrganizationExaminer", b =>
                {
                    b.Property<string>("AppUserId");

                    b.Property<int>("OrgnaizationId");

                    b.HasKey("AppUserId", "OrgnaizationId");

                    b.HasIndex("OrgnaizationId");

                    b.ToTable("OrganizationExaminers");
                });

            modelBuilder.Entity("UI.Examica.Model.Core.Domains.OrganizationObserver", b =>
                {
                    b.Property<string>("AppUserId");

                    b.Property<int>("OrgnaizationId");

                    b.HasKey("AppUserId", "OrgnaizationId");

                    b.HasIndex("OrgnaizationId");

                    b.ToTable("OrganizationObservers");
                });

            modelBuilder.Entity("UI.Examica.Model.Core.Domains.PricingPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MaxNoOfAdmins");

                    b.Property<int>("MaxNoOfExaminees");

                    b.Property<int>("MaxNoOfExaminers");

                    b.Property<int>("MaxNoOfObservers");

                    b.Property<string>("Name");

                    b.Property<int>("Price");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("PricingPlans");
                });

            modelBuilder.Entity("UI.Examica.Model.Core.Domains.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("Level");

                    b.Property<int>("Mark");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("UI.Examica.Model.Core.Domains.QuestionComplexQuestion", b =>
                {
                    b.Property<int>("ComplexQuestionId");

                    b.Property<int>("QuestionId");

                    b.HasKey("ComplexQuestionId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionComplexQuestions");
                });

            modelBuilder.Entity("UI.Examica.Model.Core.Domains.QuestionOption", b =>
                {
                    b.Property<int>("OptionId");

                    b.Property<int>("QuestionId");

                    b.HasKey("OptionId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionOptions");
                });

            modelBuilder.Entity("UI.Examica.Model.Core.Domains.Result", b =>
                {
                    b.Property<int>("ExamId");

                    b.Property<string>("UserId");

                    b.Property<int>("Grade");

                    b.HasKey("ExamId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("UI.Examica.Model.Core.Domains.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("UI.Examica.Model.Core.Domains.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UI.Examica.Model.Core.Domains.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("UI.Examica.Model.Core.Domains.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UI.Examica.Model.Core.Domains.Answer", b =>
                {
                    b.HasOne("UI.Examica.Model.Core.Domains.AppUser", "AppUser")
                        .WithMany("Answers")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UI.Examica.Model.Core.Domains.Exam", "Exam")
                        .WithMany("Answers")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UI.Examica.Model.Core.Domains.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UI.Examica.Model.Core.Domains.ComplexQuestion", b =>
                {
                    b.HasOne("UI.Examica.Model.Core.Domains.Organization", "Organization")
                        .WithMany("ComplexQuestions")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UI.Examica.Model.Core.Domains.Exam", b =>
                {
                    b.HasOne("UI.Examica.Model.Core.Domains.Organization", "Organization")
                        .WithMany("Exams")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UI.Examica.Model.Core.Domains.ExamAppUser", b =>
                {
                    b.HasOne("UI.Examica.Model.Core.Domains.AppUser", "AppUser")
                        .WithMany("ExamAppUsers")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UI.Examica.Model.Core.Domains.Exam", "Exam")
                        .WithMany("ExamAppUsers")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UI.Examica.Model.Core.Domains.ExamComplexQuestion", b =>
                {
                    b.HasOne("UI.Examica.Model.Core.Domains.ComplexQuestion", "ComplexQuestion")
                        .WithMany("examComplexQuestions")
                        .HasForeignKey("ComplexQuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UI.Examica.Model.Core.Domains.Exam", "Exam")
                        .WithMany("ExamComplexQuestions")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UI.Examica.Model.Core.Domains.ExamQuestion", b =>
                {
                    b.HasOne("UI.Examica.Model.Core.Domains.Exam", "Exam")
                        .WithMany("ExamQuestions")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UI.Examica.Model.Core.Domains.Question", "Question")
                        .WithMany("ExamQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UI.Examica.Model.Core.Domains.Organization", b =>
                {
                    b.HasOne("UI.Examica.Model.Core.Domains.AppUser", "Owner")
                        .WithMany("Organizations")
                        .HasForeignKey("OwnerId");

                    b.HasOne("UI.Examica.Model.Core.Domains.PricingPlan", "PricingPlan")
                        .WithMany("Organizations")
                        .HasForeignKey("PricingPlanId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UI.Examica.Model.Core.Domains.OrganizationAdmin", b =>
                {
                    b.HasOne("UI.Examica.Model.Core.Domains.AppUser", "AppUser")
                        .WithMany("OrganizationAdmins")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UI.Examica.Model.Core.Domains.Organization", "Organization")
                        .WithMany("OrganizationAdmins")
                        .HasForeignKey("OrgnaizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UI.Examica.Model.Core.Domains.OrganizationExaminee", b =>
                {
                    b.HasOne("UI.Examica.Model.Core.Domains.AppUser", "AppUser")
                        .WithMany("OrganizationExaminees")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UI.Examica.Model.Core.Domains.Organization", "Organization")
                        .WithMany("OrganizationExaminees")
                        .HasForeignKey("OrgnaizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UI.Examica.Model.Core.Domains.OrganizationExaminer", b =>
                {
                    b.HasOne("UI.Examica.Model.Core.Domains.AppUser", "AppUser")
                        .WithMany("OrganizationExaminers")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UI.Examica.Model.Core.Domains.Organization", "Organization")
                        .WithMany("OrganizationExaminers")
                        .HasForeignKey("OrgnaizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UI.Examica.Model.Core.Domains.OrganizationObserver", b =>
                {
                    b.HasOne("UI.Examica.Model.Core.Domains.AppUser", "AppUser")
                        .WithMany("OrganizationObservers")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UI.Examica.Model.Core.Domains.Organization", "Organization")
                        .WithMany("OrganizationObservers")
                        .HasForeignKey("OrgnaizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UI.Examica.Model.Core.Domains.Question", b =>
                {
                    b.HasOne("UI.Examica.Model.Core.Domains.Organization", "Organization")
                        .WithMany("Questions")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UI.Examica.Model.Core.Domains.QuestionComplexQuestion", b =>
                {
                    b.HasOne("UI.Examica.Model.Core.Domains.ComplexQuestion", "ComplexQuestion")
                        .WithMany("QuestionComplexQuestions")
                        .HasForeignKey("ComplexQuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UI.Examica.Model.Core.Domains.Question", "Question")
                        .WithMany("QuestionComplexQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UI.Examica.Model.Core.Domains.QuestionOption", b =>
                {
                    b.HasOne("UI.Examica.Model.Core.Domains.Option", "Option")
                        .WithMany("QuestionOptions")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UI.Examica.Model.Core.Domains.Question", "Question")
                        .WithMany("QuestionOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UI.Examica.Model.Core.Domains.Result", b =>
                {
                    b.HasOne("UI.Examica.Model.Core.Domains.Exam", "Exam")
                        .WithMany("Results")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UI.Examica.Model.Core.Domains.AppUser", "User")
                        .WithMany("Results")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
